Jenkins Shared library is the concept of having a common pipeline code in the version control system that can be used by any number of pipelines just by referencing it.
Jenkins Shared Libraries are used for code reusability in Pipeline jobs.
Jenkins Shared Libraries is a collection of Groovy scripts shared between different Jenkins jobs.
Jenkins Shared Libraries is a collection of independent Groovy scripts.
Jenkins Shared Library is the concept of having a common pipeline code in the version control system that can be used by any number of pipelines just by referring to it in the pipeline code.
Developers use shared libraries to avoid writing the same code from scratch for multiple projects.
It reduces the effort of the developer by keeping the same logic in multiple files.
This drastically cuts down time spent on coding and helps avoid duplicate code.
The structure of Jenkins Shared Libraries folder.
                Project_Root_Folder
                |
                |
                |------> vars (FOLDER)
                |        |
                |        |--- FILE_NAME.groovy
                |
                |------> src (FOLDER)
                |        |
                |        |--- FILE_NAME.groovy
                |
                |------> resources (FOLDER)
                |        |
                |        |--- FILE_NAME.json
● vars
This directory holds all the global shared library code that can be called from a Jenkins pipeline.
It holds all the library files with a .groovy extension.
We can generate it using the Jenkins pipeline generator.
The vars directory also supports .txt files for the documentation of shared library code.
● src
It is a regular Java source directory.
It can add custom structured and object-oriented code Groovy code to extend your shared library code.
● resources
All the non-groovy OR unnecessary files required for pipelines can be managed in this folder.
One such example is, might need a common JSON template to make an API call during the build.
This JSON template can be stored in the resources folder and can be accessed in the shared library using the libraryResource function.

[EXAMPLE]
● 1
We have five different Spring Boot applications in Microservice architecture.
All of them need to be built using Maven, run Unit & Integration tests to ensure the integrity of code, packed as a JAR/WAR file & pushed to the artifactory.
All five applications need their own Jenkinsfile, but the content of the Jenkinsfiles is going to be mostly the same.
Jenkins Shared Library avoids this repetition of pipeline code by creating a shared library.
● 2
If we have 10 java microservices pipelines, then maven build step will be duplicated in all the 10 pipelines.
Whenever a new service get added then will copy and paste the pipeline code again.
Also want to change some parameter in the maven build step will have to do it all the pipeline manually.
